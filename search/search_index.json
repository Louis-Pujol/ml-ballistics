{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hello, world!</p>"},{"location":"generated/gallery/","title":"Gallery of examples","text":"<p>Examples gallery</p> <p> Impact of drag on a missile </p> <p> Reach a fixed target </p> <p> Download all examples in Python source code: gallery_python.zip</p> <p> Download all examples in Jupyter notebooks: gallery_jupyter.zip</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/mg_execution_times/","title":"Computation times","text":"<p>00:52.803 total execution time for generated_gallery files:</p> <p>+-----------------------------------------------------------------------------+-----------+--------+ | plot_fixed_target (examples/plot_fixed_target.py) | 00:33.825 | 0.0 MB | +-----------------------------------------------------------------------------+-----------+--------+ | plot_example_drag (examples/plot_example_drag.py) | 00:18.978 | 0.0 MB | +-----------------------------------------------------------------------------+-----------+--------+</p>"},{"location":"generated/gallery/plot_example_drag/","title":"Impact of drag on a missile","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/plot_example_drag/#impact-of-drag-on-a-missile","title":"Impact of drag on a missile","text":"<p>This example shows the trajectory of a missile with and without drag.</p> <pre><code>import torch\nfrom mlballistics.objects import Sphere\nfrom mlballistics.forces import Gravity, Drag\nfrom mlballistics.scene import Scene\n\n#\u00a0%%\n# Same initial conditions for both missiles.\n\ninitial_position = torch.Tensor([0.0, 0.0, 0.0])\ninitial_velocity = torch.Tensor([5.0, 0.0, 9.0])\n</code></pre> <p>Missile without drag.</p> <pre><code>missile_nodrag = Sphere(\n    radius=0.1,\n    mass=1.0,\n    initial_position=initial_position,\n    initial_velocity=initial_velocity,\n    force=Gravity(),\n)\n</code></pre> <p>Missile with drag.</p> <pre><code>missile_drag = Sphere(\n    radius=0.1,\n    mass=1.0,\n    initial_position=initial_position,\n    initial_velocity=initial_velocity,\n    force=Gravity() + Drag(),\n)\n</code></pre> <p>Simulate the scene.</p> <pre><code>scene = Scene(objects=[missile_nodrag, missile_drag])\nscene.simulate(stop_time=1.6, n_steps=100)\n</code></pre> <p>Plot the trajectories.</p> <pre><code>import pyvista as pv\n\ncpos = [(4.000001950189471, -12.056954193477605, 2.0641854759305716),\n (4.000001950189471, 0.0, 2.0641854759305716),\n (0.0, 0.0, 1.0)]\n\nplotter_gif = pv.Plotter(notebook=False, off_screen=True)\n\nplotter_gif.open_gif(\"missile.gif\", fps=30)\nfor time in range(100):\n\n    plotter_gif.clear_actors()\n\n    actor1 = missile_drag.actor(time=time, color='red', opacity=0.5)\n    actor2 = missile_nodrag.actor(time=time, color='blue', opacity=0.5)\n\n    plotter_gif.add_actor(actor1)\n    plotter_gif.add_actor(actor2)\n\n    plotter_gif.camera_position = cpos\n    plotter_gif.show_axes()\n    plotter_gif.write_frame()\n\nplotter_gif.show()\n</code></pre> <p></p> <p>Total running time of the script: ( 0 minutes  18.978 seconds)</p> <p> Download Python source code: plot_example_drag.py</p> <p> Download Jupyter notebook: plot_example_drag.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_fixed_target/","title":"Reach a fixed target","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/plot_fixed_target/#reach-a-fixed-target","title":"Reach a fixed target","text":"<p>This example shows how to reach a fixed target with a missile.</p> <pre><code>import torch\ntorch.manual_seed(0)\nfrom mlballistics.objects import Sphere\nfrom mlballistics.forces import Gravity, Drag\nfrom mlballistics.scene import Scene\n\ncpos = [(6.500000085681677, -22.012470029172995, 5.000000189989805),\n (6.500000085681677, 0.0, 5.000000189989805),\n (0.0, 0.0, 1.0)]\n\n#\u00a0%%\n# Some conditions\n\ndef initial_conditions(speed, angle, max_speed=30):\n    \"\"\"Convert speed and angle to initial position and velocity.\n\n    Parameters\n    ----------\n    speed\n        Initial speed of the missile. (m/s)\n    angle\n        angle of the missile with respect to the horizontal. (rad)\n    max_speed\n        Maximum speed of the missile. (m/s)\n\n    Returns\n    -------\n    initial_position\n        Initial position of the missile. (m)\n    initial_velocity\n        Initial velocity of the missile. (m/s)\n    \"\"\"\n    #\u00a0Speed must be positive and less than max_speed.\n    speed = torch.clamp(speed, 0.0, max_speed)\n    initial_position = torch.Tensor([0.0, 0.0, 0.0])\n\n    initial_velocity = torch.zeros(3, dtype=torch.float32)\n\n    initial_velocity[0] = speed * torch.cos(angle)\n    initial_velocity[2] = speed * torch.sin(angle)\n\n    return initial_position, initial_velocity\n</code></pre> <p>Initialize the target (no force + 0 initial velocity = fixed target).</p> <pre><code>target = Sphere(\n    radius=0.1,\n    mass=1.0,\n)\n\ntarget.force = None\n\ninital_x = 13 # * (0.5 + (torch.rand(1) / 2))\ninital_z = 10 # * (0.7 + (torch.rand(1) / 2))\n\ntarget.initial_position = torch.Tensor([inital_x, 0.0, inital_z])\ntarget.initial_velocity = torch.Tensor([0.0, 0.0, 0.0])\n</code></pre> <p>Missile with drag.</p> <pre><code>missile = Sphere(\n    radius=0.1,\n    mass=1.0,\n    force=Gravity(),\n)\n\nmissile.force = Gravity() + Drag()\n\n#\u00a0%%\n# Random initial conditions.\n\ninitial_speed = 30 * (0.5 * torch.rand(1) + 0.5)\ninitial_angle = torch.pi * torch.rand(1) / 2\n\ninitial_speed.requires_grad = True\ninitial_angle.requires_grad = True\n\n\ninitial_position, initial_velocity = initial_conditions(\n    initial_speed, initial_angle\n    )\n\nmissile.initial_position = initial_position\nmissile.initial_velocity = initial_velocity\n</code></pre> <p>Simulate the scene.</p> <pre><code>scene = Scene(objects=[missile, target])\nscene.simulate(stop_time=1, n_steps=100)\n</code></pre> <p>Plot the trajectories.</p> <pre><code>import pyvista as pv\n\n\nplotter_gif = pv.Plotter(off_screen=True)\n\nplotter_gif.open_gif(\"initial.gif\", fps=30)\nfor time in range(100):\n\n    plotter_gif.clear_actors()\n\n    actor1 = missile.actor(time=time, color='red', opacity=0.5)\n    actor2 = target.actor(time=time, color='blue', opacity=0.5)\n\n    plotter_gif.add_actor(actor1)\n    plotter_gif.add_actor(actor2)\n\n    plotter_gif.camera_position = cpos\n    plotter_gif.show_axes()\n    plotter_gif.write_frame()\n\nplotter_gif.show()\n\n#\u00a0%%\n# Define the forward pass.\n\n\ndef forward(initial_angle, initial_speed):\n    initial_position, initial_velocity = initial_conditions(\n        initial_speed, initial_angle\n        )\n\n    missile.initial_position = initial_position\n    missile.initial_velocity = initial_velocity\n\n    scene = Scene(objects=[missile, target])\n    scene.simulate(stop_time=1, n_steps=100)\n\n    loss = torch.norm(missile.trajectory - target.trajectory, dim=1).min()\n\n    return loss\n\n\n#\u00a0%%\n# Optimize the initial conditions.\n\noptimizer = torch.optim.LBFGS(\n    [initial_angle, initial_speed],\n    line_search_fn='strong_wolfe'\n    )\n\ndef closure():\n    optimizer.zero_grad()\n    loss = forward(initial_angle, initial_speed)\n    loss.backward()\n    return loss\n\ndef text():\n    return (f\"Angle: {initial_angle.item():.2f} rad, Speed: {initial_speed.item():.2f} m/s, Loss: {closure().item():.2f}\")\n\nprint(\"Initial conditions: \" + text())\nfor i in range(2):\n    if closure().item() &gt; 1e-5:\n        optimizer.step(closure)\n        print(f\"Step {i+1}: \" + text())\n</code></pre> <p></p> <p>Out:</p> <pre><code>Initial conditions: Angle: 1.21 rad, Speed: 22.44 m/s, Loss: 7.06\nStep 1: Angle: 0.81 rad, Speed: 26.45 m/s, Loss: 0.00\nStep 2: Angle: 0.81 rad, Speed: 26.46 m/s, Loss: 0.00\n</code></pre> <p>Plot the trajectory after optimization.</p> <pre><code>plotter_gif = pv.Plotter(off_screen=True)\nplotter_gif.open_gif(\"final.gif\", fps=30)\ncollision = False\nfor time in range(100):\n\n    if not collision:\n\n        if torch.norm(\n            missile.trajectory[time, :] - target.trajectory[time, :]\n            ) &lt; missile.radius + target.radius:\n            collision = True\n\n        plotter_gif.clear_actors()\n\n        actor1 = missile.actor(time=time, color='red', opacity=0.5)\n        actor2 = target.actor(time=time, color='blue', opacity=0.5)\n\n        plotter_gif.add_actor(actor1)\n        plotter_gif.add_actor(actor2)\n\n        plotter_gif.camera_position = cpos\n        plotter_gif.show_axes()\n        plotter_gif.write_frame()\n\nplotter_gif.show()\n</code></pre> <p></p> <p>Total running time of the script: ( 0 minutes  33.825 seconds)</p> <p> Download Python source code: plot_fixed_target.py</p> <p> Download Jupyter notebook: plot_fixed_target.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"}]}